// Задача 15.  Hoisting.
// Какой результат работы кода с функцией square, выполняющей возведение числа во вторую степень (в квадрат).
//console.log(square(5)); 

let square = function (n) {
  return n * n;
};

console.log(square(5)); 
// Варианы ответов:
// 1. Поднятие переменной `square` в начало области видимости, но ошибка при попытке вызова `square(5)` из-за того, что `square` имеет значение `undefined`, а не функция.
// 2. Поднятие переменной `square` со значением `undefined`, но нет ошибки при попытке вызова `square(5)`, так как интерпретатор видит, что `square` является функцией.
// 3. Поднятие переменной `square` со значением `undefined` и ошибка при попытке вызова `square(5)`, потому что переменная `square` не определена.
// 4. Ошибка в строке `let square = function (n) { return n * n; };` из-за неправильного синтаксиса объявления функции.
// Выберите один ответ:1)


//answer from chatGPT
// Пояснение:
// В JavaScript функции и переменные, объявленные с помощью let и const, не поднимаются (hoisting) в начало области видимости, как это происходит с переменными, объявленными с помощью var. Однако, когда переменная объявляется с помощью let или const, она сначала инициализируется со значением undefined, до того как происходит фактическое присваивание значения. Поэтому, хотя переменная square будет доступна в коде до её фактического определения, её значение будет undefined. Однако, к моменту вызова square(5), переменная square уже будет определена как функция, поэтому вызов функции пройдет успешно.
