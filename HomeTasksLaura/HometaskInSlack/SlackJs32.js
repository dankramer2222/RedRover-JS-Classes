// Задача 32. Быстрое преобразование массива.

let numbers = [4, 8, 15, 16, 23, 42];

let doubledNumbers = numbers.map(function(num) {
    return num * 2;
});

console.log(doubledNumbers); // Вывод: [8, 16, 30, 32, 46, 84]
// Какой метод массива был использован в коде - что нужно написать на месте `[******]`?
// 1. forEach()
// 2. filter()
// 3. map()
// 4. reduce()
// Выберите один ответ.
// / можно просто нажать на нужную цифру-эмоджи или в комментариях ответить. Если что-то не понятно - задавайте вопросы в комментариях.

// Правильный ответ: 3. метод map() был использован для преобразования каждого элемента массива.
// В данном коде использован метод массива `map()`. В методе `map()` вызывается функция обратного вызова для каждого элемента массива, результаты её выполнения сохраняются в новом массиве, который и возвращается. Таким образом, каждый элемент исходного массива удваивается.
// Давайте рассмотрим каждый из вариантов:
// 1. `forEach()`: Метод `forEach()` используется для выполнения функции обратного вызова для каждого элемента массива, но он не возвращает новый массив с результатами применения функции к каждому элементу. Он просто перебирает элементы массива, поэтому не подходит для создания нового массива с удвоенными значениями.
// 2. `filter()`: Метод `filter()` используется для фильтрации элементов массива на основе определённого условия, возвращая только те элементы, для которых условие истинно. В данном случае мы не фильтруем элементы, а изменяем их значения, поэтому `filter()` не подходит.
// 3. `map()`: Метод `map()` используется для преобразования каждого элемента массива с помощью функции обратного вызова и создания нового массива с результатами преобразований. В данном случае мы применяем функцию удвоения к каждому элементу массива и создаем новый массив с удвоенными значениями, что соответствует задаче.
// 4. `reduce()`: Метод `reduce()` используется для свертки (преобразования) массива в одно значение на основе функции обратного вызова. В данном случае мы не сворачиваем массив в одно значение, а создаем новый массив с удвоенными значениями, поэтому `reduce()` не подходит.
// Таким образом, единственный метод, который подходит для данной задачи - это `map()`.


// Правильно ли я понимаю, если бы мы не создавали новую переменную, а применили бы метод forEach к массиву, то при выводе (console.log(numbers)) вернулся бы изменённый массив, т е получили бы тот же ответ?


// LauraB [teacher]
// let numbers = [4, 8, 15, 16, 23, 42];

// let doubledNumbers = numbers.forEach(function(num) {
//     return num * 2;
// });

// console.log(doubledNumbers);
// вот так? 


// LauraB [teacher]
// Если вы хотите использовать `forEach()`, чтобы удвоить значения в массиве `numbers`, вы можете это сделать, но вы не сможете сохранить результат в переменной `doubledNumbers`, потому что `forEach()` не возвращает новый массив. Однако вы можете использовать `forEach()`, чтобы изменить значения в исходном массиве. Вот как это можно сделать:
// let numbers = [4, 8, 15, 16, 23, 42];

// numbers.forEach(function(num, index, array) {
//     array[index] = num * 2;
// });

// console.log(numbers);
// Этот код удвоит каждое значение в массиве `numbers`, но не создаст новый массив. Результат будет отображен в исходном массиве `numbers`.


// LauraB [teacher]
// Метод forEach() не возвращает новый массив. Он просто выполняет функцию обратного вызова для каждого элемента массива, но не возвращает никаких значений.
// В вашем случае переменная doubledNumbers будет иметь значение undefined, потому что возвращаемое значение от метода forEach() будет проигнорировано. Вы можете использовать метод map() вместо forEach(), чтобы получить новый массив с удвоенными значениями.


// LauraB [teacher]
//   9 days ago
// forEach это короткая запись for(let i = 0; i < arr.length; i++).
// И дальше в скобках указываете что нужно сделать с каждым элементом массива
// :heart:
// 2



// LauraB [teacher]
//   9 days ago
// еще сокращаем код с использованием стрелочной функции
// let numbers = [4, 8, 15, 16, 23, 42];

// numbers.forEach((num, index, array) => {
//     array[index] = num * 2;
// });

// console.log(numbers);


// LauraB [teacher]
//   9 days ago
// еще короче
// let numbers = [4, 8, 15, 16, 23, 42];
// numbers.forEach((num,i) => numbers[i] = numbers[i] * 2);
// console.log(numbers);